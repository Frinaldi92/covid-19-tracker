{"version":3,"sources":["Components/InfoBox.js","util.js","Components/Map.js","Components/Table.js","Components/LineGraph.js","Components/App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","isOrange","isRed","isGreen","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","pretty","stat","Map","zoom","countries","MapContainer","scrollWheelZoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","mapCountries","setMapCountries","tableData","setTableData","mapPosition","mapZoom","setMapZoom","setCasesType","name","iso2","sortedData","getCountriesData","console","log","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97f0ebac.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\nimport '../Styles/InfoBox.css'\n\nfunction InfoBox({ title, cases, total, isOrange, isRed, isGreen, active, ...props }) {\n    return (\n        <Card\n        onClick={props.onClick}\n        className={`infoBox ${active && 'infoBox--selected'} ${isOrange && 'infoBox--orange'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                <Typography className='infoBox__title' color='textSecondary'>\n                    {title}<span className='todayCasesNum'> (today)</span>\n                </Typography>\n                <h2 className={`infoBox__cases ${isGreen && 'infoBox__cases--green'} ${isRed && 'infoBox__cases--red'}`}>{cases}</h2>\n                <Typography className='infoBox__total' color='textSecondary'>\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react'\nimport numeral from 'numeral'\nimport { Circle, Popup } from 'react-leaflet'\n\nconst casesTypeColors = {\n    cases: {\n        hex: '#ED8A2C', \n        multiplier: 400,\n    },\n    recovered: {\n        hex: '#7dd71d',\n        multiplier: 400,\n    },\n    deaths: {\n        hex: '#CC1034',\n        multiplier: 1000,\n    },\n}\n\n// sort data by cases to show on table\nexport const sortData = (data) => {\n    const sortedData = [...data]\n    \n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1)\n}\n\n// Draw circles on Map showing cases\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country => (\n        <Circle\n        key={country.country}\n        center={[country.countryInfo.lat, country.countryInfo.long]}\n        fillOpacity={0.4}\n        pathOptions={{ color: casesTypeColors[casesType].hex }}\n        radius={\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n        }\n        >\n            <Popup>\n                <div className='info__container'>\n                    <div\n                    className='info__flag'\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    />\n                    <div className='info__name'>{country.country}</div>\n                    <div className='info__cases'>Cases: {numeral(country.cases).format('0,0')}</div>\n                    <div className='info__recovered'>Recovered: {numeral(country.recovered).format('0,0')}</div>\n                    <div className='info__deaths'>Deaths: {numeral(country.deaths).format('0,0')}</div>\n                </div> \n            </Popup>\n        </Circle>\n    ))\n)\n// Make format of numers shows in infoboxes look 'Pretty'\nexport const pretty = (stat) => stat ? `+${numeral(stat).format('0,0a')}` : '+0'\n","import React from 'react'\nimport { MapContainer, TileLayer } from 'react-leaflet'\nimport { showDataOnMap } from '../util'\nimport '../Styles/Map.css'\nimport 'leaflet/dist/leaflet.css'\n\n\nfunction Map({ center, zoom, countries, casesType }) {\n    \n    return (\n        <div className='map'>\n            <MapContainer\n            center={center}\n            zoom={zoom}\n            scrollWheelZoom={false}\n            >\n                <TileLayer\n                url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </MapContainer>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport numeral from 'numeral'\nimport '../Styles/Table.css'\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n                {countries.map(({ country, cases }) => (\n                    <tr key={country}>\n                        <td>{country}</td>\n                        <td><strong>{numeral(cases).format('0,0')}</strong></td>\n                    </tr>\n                ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport numeral from 'numeral'\n\nconst options = {\n    legend: {\n        display: false\n    },\n    elements: {\n        point: {\n            radius: 0\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format('+0,0')\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n            type: 'time',\n            parser: {\n                format: 'MM/DD/YY',\n                tooltipFormat: 'll'\n            },\n        },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format('0a')\n                    },\n                },\n            },\n        ],\n    },\n}\n\nfunction LineGraph({ casesType, ...props }) {\n    const [data, setData] = useState({})\n\n    const buildChartData = (data, casesType ) => {\n        const chartData = []\n        let lastDataPoint\n    \n        for(let date in data.cases) {\n            if(lastDataPoint) {\n                const newDataPoint = {\n                    x: date,\n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date]\n        }\n        return chartData\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\n            .then(response => response.json())\n            .then(data => {\n                let chartData = buildChartData(data, casesType)\n                setData(chartData)\n            })\n        }\n        fetchData()\n    }, [casesType])\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n                <Line\n                data={{\n                    datasets: [{\n                        data: data,\n                        backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                        borderColor: '#CC1034'\n                        }]\n                    }}\n                options={options}\n                />\n\n            )}\n        </div>\n    )\n}\n\nexport default LineGraph\n","import { FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react'\n// Components\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport LineGraph from './LineGraph'\n// Util\nimport { sortData, pretty } from '../util'\n// Style\nimport '../Styles/App.css';\nimport 'leaflet/dist/leaflet.css'\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [mapCountries, setMapCountries] = useState([])\n  const [tableData, setTableData] = useState([])\n  const [mapPosition, setMapPosition] = useState([30, 0])\n  const [mapZoom, setMapZoom] = useState(2)\n  const [casesType, setCasesType] = useState('cases')\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data)\n    })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then(response => response.json())\n      .then(data => {\n        const countries = data.map(country => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ))\n        let sortedData = sortData(data)\n        setTableData(sortedData)\n        setMapCountries(data)\n        setCountries(countries)\n      })\n    }\n    getCountriesData()\n  }, [])\n  console.log(countries)\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value\n    setCountry(countryCode)\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n      // setMapPosition([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4)\n    })\n  }\n  console.log(countryInfo)\n  console.log(mapPosition)\n  return (\n    <div className=\"app\">\n      <div className=\"app__leftSide\">\n      <div className=\"app__header\">\n      <h1>COVID-19 TRACKER</h1>\n      <FormControl className='app__dropdown'>\n        <Select\n        variant='outlined'\n        value={country}\n        onChange={onCountryChange}\n        >\n          <MenuItem value='worldwide'>Worldwide</MenuItem>\n          {\n            countries.map(country => (\n              <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n            ))\n          }\n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app__stats\">\n          <InfoBox\n          isOrange\n          onClick={(e) => setCasesType('cases')}\n          title='Coronavirus Cases'\n          active={casesType === 'cases'}\n          cases={pretty(countryInfo.todayCases)}\n          total={pretty(countryInfo.cases)}\n          />\n          <InfoBox\n          isGreen\n          onClick={(e) => setCasesType('recovered')}\n          title='Recovered'\n          active={casesType === 'recovered'}\n          cases={pretty(countryInfo.todayRecovered)}\n          total={pretty(countryInfo.recovered)}\n          />\n          <InfoBox\n          isRed\n          onClick={(e) => setCasesType('deaths')}\n          title='Deaths'\n          active={casesType === 'deaths'}\n          cases={pretty(countryInfo.todayDeaths)}\n          total={pretty(countryInfo.deaths)}\n          />\n      </div>\n      <Map\n      casesType={casesType}\n      countries={mapCountries}\n      center={mapPosition}\n      zoom={mapZoom}\n      />\n      </div>\n      <Card className=\"app__rightSide\">\n        <CardContent>\n          <h3>Total Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}<span className='lastThirty'> (last 30 days)</span></h3>\n          <LineGraph className='app__graph' casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}